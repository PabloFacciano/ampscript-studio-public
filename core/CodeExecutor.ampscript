<script runat=server>

var ampscriptStudio = {
  config: {
    authDE: 'ampscript_studio__auth',
    logsDE: 'ampscript_studio__run_history_lines'
  },
  output: {
    version: '0.2',
    timming: []
  },
  input: {},
  getPostData: function(){
    var json = Platform.Request.GetPostData();
    this.input = Platform.Function.ParseJSON(json);
  },
  addTimingRecord: function(id){
    if (this.input.timming == false){ return; }
    var dt = new Date();
    this.output.timming.push({ id: id, date: dt })
  },
  clearDE: function(externalKey){
    var prox = new Script.Util.WSProxy();
    return data = prox.performItem("DataExtension", { CustomerKey: externalkey }, "ClearData");
  },
  runAmpscript: function(code){
    var ampBlock = '\%\%[' + code + ']\%\%';
    Platform.Function.TreatAsContent(ampBlock);
    return Variable.GetValue('@response');
  },
  addLogsToOutput: function(){
    if (this.input.logs == false){ return; }
    this.output.logs = Platform.Function.LookupRows(this.config.logsDE,'ExecutionID',this.input.executionId);
  },
  writeOutput: function(){
    Platform.Response.Write(Platform.Function.Stringify(this.output));
  },
  setHeaders: function(){
    HTTPHeader.SetValue("Access-Control-Allow-Methods","GET, POST, OPTIONS");
    HTTPHeader.SetValue("Access-Control-Allow-Origin","*");
    HTTPHeader.SetValue("Access-Control-Allow-Headers","Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With");
    // HTTPHeader.SetValue("Server-Timing",'db;dur=123;desc="Database", tmpl;dur=56;desc="Template processing"');
  },
  runCodeEditor: function(){
    try {
      this.addTimingRecord('Code Start');
      this.output.result = Platform.Function.TreatAsContent(this.input.code);
      this.output.status = 'ok';
    } catch (e) {
      this.output.error = e;
      this.output.status = 'error';
    } finally {
      this.addTimingRecord('Code End');
      this.addLogsToOutput();
    }
  },
  doAuth: function(){
    /*
    var authToken = Platform.Request.GetRequestHeader('X-API-Key');
    var auth = Platform.Function.LookupRows(this.config.logsDE,'ExecutionID',this.input.executionId)
    */
  }
}

  
Platform.Load("core","1");
ampscriptStudio.setHeaders();
ampscriptStudio.doAuth();
ampscriptStudio.getPostData(); 
ampscriptStudio.runCodeEditor();
ampscriptStudio.writeOutput();

/*
-- Expected Request Body:
{
  action: 'run-code',
  executionId: 'asdf',
  code: '<html>',
  timming: true|false,
  logs: true|false
}
-- Expected Request Response OK:
{
  version: '0.1',
  status: 'ok',
  result: '<html>',
  timming: []
}
-- Expected Request Response ERROR:
{
  version: '0.1',
  status: 'error',
  error: {
    message: 'asdasd',
    description: 'asdasd'
  },
  timming: []
}
*/
</script>